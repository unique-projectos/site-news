name: Deploy PHP to VPS LITESPEED

on:
  push:
    branches:
      - dev
  pull_request:
    branches:
      - dev

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Install SSH, Docker and deployment tools
      run: |
        sudo apt-get update
        sudo apt-get install -y openssh-client sshpass rsync curl unzip apt-transport-https ca-certificates curl software-properties-common lsb-release
        
        # Instalar Docker
        if ! command -v docker &> /dev/null; then
          echo "Instalando Docker..."
          sudo curl -fsSL https://get.docker.com -o get-docker.sh
          sudo sh get-docker.sh
          sudo usermod -aG docker ${USER}
        else
          echo "Docker já está instalado."
        fi

        # Instalar Docker Compose
        if ! command -v docker-compose &> /dev/null; then
          echo "Instalando Docker Compose..."
          sudo curl -L "https://github.com/docker/compose/releases/download/$(curl -s https://api.github.com/repos/docker/compose/releases/latest | jq -r .tag_name)/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
        else
          echo "Docker Compose já está instalado."
        fi

    - name: Deploy to VPS
      env:
        VPS_PASSWORD: ${{ secrets.VPS_PASSWORD }}
        VPS_USER: ${{ secrets.VPS_USER }}
        VPS_HOST: ${{ secrets.VPS_HOST }}
        TARGET_DIR: /var/www/portal-web
      run: |
        set -e

        echo "Validando conexão SSH..."
        sshpass -p "${VPS_PASSWORD}" ssh -o StrictHostKeyChecking=no -T ${VPS_USER}@${VPS_HOST} "echo 'Conexão SSH estabelecida com sucesso.'"

        echo "Sincronizando arquivos com rsync..."
        sshpass -p "${VPS_PASSWORD}" rsync -avz --delete --exclude '.git' --exclude '.github' . "${VPS_USER}@${VPS_HOST}:${TARGET_DIR}"

        echo "Corrigindo permissões no VPS..."
        sshpass -p "${VPS_PASSWORD}" ssh ${VPS_USER}@${VPS_HOST} << EOF
          sudo chown -R ${VPS_USER}:${VPS_USER} "${TARGET_DIR}"
          sudo chmod -R u+rwX,g+rwX,o+rwX "${TARGET_DIR}"

          SESSION_DIR="${TARGET_DIR}/application/sessions"
          if [ ! -d "\$SESSION_DIR" ]; then
            mkdir -p "\$SESSION_DIR"
          fi
          sudo chmod -R u+rwX,g+rwX,o+rwX "\$SESSION_DIR"
          sudo chown -R ${VPS_USER}:${VPS_USER} "\$SESSION_DIR"

          if [ -f "${TARGET_DIR}/.env.production" ]; then
            cat "${TARGET_DIR}/.env.production" > "${TARGET_DIR}/.env"
            echo "Conteúdo de .env.production movido para .env"
          else
            echo "Arquivo .env.production não encontrado"
          fi

          if [ -f "${TARGET_DIR}/compose.production.yaml" ]; then
            cat "${TARGET_DIR}/compose.production.yaml" > "${TARGET_DIR}/compose.yaml"
            echo "Conteúdo de compose.production.yaml movido para .env"
          else
            echo "Arquivo compose.production.yaml não encontrado"
          fi
          
          mkdir -p "${TARGET_DIR}/storage/app/chat"
          touch "${TARGET_DIR}/storage/app/chat/default_settings.json"
          chmod 775 "${TARGET_DIR}/storage/app/chat/default_settings.json"
          chown -R ${VPS_USER}:${VPS_USER} "${TARGET_DIR}/storage/app/chat"

          echo '{}' > "${TARGET_DIR}/storage/app/chat/default_settings.json"

          chmod -R 777 "${TARGET_DIR}/storage"
          chmod -R 777 "${TARGET_DIR}/storage/logs"
          chmod -R 777 "${TARGET_DIR}/bootstrap/cache"

          chmod -R 777 "${TARGET_DIR}/.env"

          sudo systemctl reload lsws
        EOF

        echo "Iniciando contêiner Docker..."

        # Navegar até o diretório onde o Docker Compose está localizado e iniciar os contêineres
        sshpass -p "${VPS_PASSWORD}" ssh ${VPS_USER}@${VPS_HOST} << EOF
          cd "${TARGET_DIR}"

          # Verificar se o Docker Compose está funcionando
          if ! docker-compose -v &> /dev/null; then
            echo "Docker Compose não encontrado, por favor instale o Docker Compose"
            exit 1
          fi

          # Derrubar e recriar contêineres
          sudo docker compose down
          # sudo docker compose build --no-cache
          docker compose  up -d --build
        EOF